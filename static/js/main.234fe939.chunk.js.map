{"version":3,"sources":["App.tsx","index.js"],"names":["initialState","App","useState","JSON","parse","stringify","columns","setColumns","P1","P2","players","setPlayers","currentPlayer","setCurrentPlayer","winner","setWinner","getPlayersNames","window","prompt","length","trim","alert","useEffect","checkWinner","p1Column","p2Column","p1Row","p2Row","p1Diagonal","p2Diagonal","p1BackDiagonal","p2BackDiagonal","columnsLength","c","i","checkColumnsAndRows","columnStyle","border","width","height","display","flexDirection","alignItems","cleanBoard","style","justifyContent","margin","map","column","idx","onClick","id","newArr","push","clickHandler","personDisc","x","currentDiscStyle","marginBottom","borderRadius","backgroundColor","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.234fe939.chunk.js","sourcesContent":["import { render } from \"react-dom\";\nimport React, { useEffect, useState } from \"react\";\n\nconst initialState: Array<Array<string>> = [[], [], [], [], [], [], []];\n\nconst App = () => {\n  const [columns, setColumns] = useState<Array<[string]>>(\n    JSON.parse(JSON.stringify(initialState))\n  );\n\n  const [players, setPlayers] = useState<{ [key: string]: string | null }>({\n    P1: \"Player 1\",\n    P2: \"Player 2\",\n  });\n\n  const [currentPlayer, setCurrentPlayer] = useState<string>(\"P1\");\n  const [winner, setWinner] = useState<null | string>(null);\n\n  const getPlayersNames = () => {\n    let P1: string | null;\n    let P2: string | null;\n\n    P1 = window.prompt(`Enter your name`);\n    P2 = window.prompt(`Enter your name`);\n\n    if (\n      P1 === P2 ||\n      (P1 != null && P1.length === 0) ||\n      (P2 != null && P2.length === 0) ||\n      (P1 && P1.trim().length === 0) ||\n      (P2 && P2.trim().length === 0)\n    ) {\n      alert(\"Error: give different names to players\");\n\n      getPlayersNames();\n    }\n\n    return {\n      P1,\n      P2,\n    };\n  };\n\n  useEffect(() => {\n    const { P1, P2 } = getPlayersNames();\n\n    setPlayers({ P1, P2 });\n  }, []);\n\n  const clickHandler = (id: number) => { \n    const newArr = columns;\n\n    if (newArr[id].length >= 6) return;\n\n    newArr[id].push(currentPlayer);\n\n    setColumns(newArr);\n\n    if (currentPlayer === \"P1\") {\n      setCurrentPlayer(\"P2\");\n    } else {\n      setCurrentPlayer(\"P1\");\n    }\n    checkWinner();\n  };\n\n  const checkWinner = () => {\n    let p1Column: number = 0;\n    let p2Column: number = 0;\n    let p1Row: number = 0;\n    let p2Row: number = 0;\n    let p1Diagonal: number = 0;\n    let p2Diagonal: number = 0;\n    let p1BackDiagonal: number = 0;\n    let p2BackDiagonal: number = 0;\n    let columnsLength: number = columns.length - 1;\n    let rowLength: number = 5;\n\n    for (let c = 0; c < columnsLength; c++) {\n      for (let i = 0; i < rowLength; i++) {\n        if (\n          columns[c][i] &&\n          columns[c][i + 1] &&\n          columns[c][i + 2] &&\n          columns[c][i + 3]\n        ) {\n          if (\n            columns[c][i] === columns[c][i + 1] &&\n            columns[c][i + 1] === columns[c][i + 2] &&\n            columns[c][i + 2] === columns[c][i + 3]\n          ) {\n            if (columns[c][i] === \"P1\") {\n              p1Column = 1;\n            } else {\n              p2Column = 1;\n            }\n          }\n        }\n      }\n    }\n\n    for (let c = 0; c < columnsLength; c++) {\n      for (let i = 0; i < rowLength; i++) {\n        if (\n          columns[c][i] &&\n          columns[c + 1] &&\n          columns[c + 1][i] &&\n          columns[c + 2] &&\n          columns[c + 3]\n        ) {\n          if (\n            columns[c][i] === columns[c + 1][i] &&\n            columns[c + 1][i] === columns[c + 2][i] &&\n            columns[c + 2][i] === columns[c + 3][i]\n          ) {\n            if (columns[c][i] === \"P1\") {\n              p1Row = 1;\n            } else {\n              p2Row = 1;\n            }\n          }\n        }\n      }\n    }\n\n    for (let c = 0; c < columnsLength; c++) {\n      for (let i = 0; i < rowLength; i++) {\n        if (\n          columns[c][i] &&\n          columns[c + 1] &&\n          columns[c + 2] &&\n          columns[c + 3] &&\n          columns[c + 1][i + 1] &&\n          columns[c + 2][i + 2] &&\n          columns[c + 3][i + 3]\n        ) {\n          if (\n            columns[c][i] === columns[c + 1][i + 1] &&\n            columns[c + 1][i + 1] === columns[c + 2][i + 2] &&\n            columns[c + 2][i + 2] === columns[c + 3][i + 3]\n          ) {\n            if (columns[c][i] === \"P1\") {\n              p1Diagonal = 1;\n            } else {\n              p2Diagonal = 1;\n            }\n          }\n        }\n      }\n    }\n\n    for (let c = columnsLength; c > 0; c--) {\n      for (let i = 0; i < rowLength; i++) {\n        if (\n          columns[c] &&\n          columns[c][i] &&\n          columns[c - 1] &&\n          columns[c - 2] &&\n          columns[c - 3] &&\n          columns[c - 1][i + 1] &&\n          columns[c - 2][i + 2] &&\n          columns[c - 3][i + 3]\n        ) {\n          if (\n            columns[c][i] === columns[c - 1][i + 1] &&\n            columns[c - 1][i + 1] === columns[c - 2][i + 2] &&\n            columns[c - 2][i + 2] === columns[c - 3][i + 3]\n          ) {\n            if (columns[c][i] === \"P1\") {\n              p1BackDiagonal = 1;\n            } else {\n              p2BackDiagonal = 1;\n            }\n          }\n        }\n      }\n    }\n\n    checkColumnsAndRows(\n      p1Column,\n      p2Column,\n      p1Row,\n      p2Row,\n      p1Diagonal,\n      p2Diagonal,\n      p1BackDiagonal,\n      p2BackDiagonal\n    );\n  };\n\n  const checkColumnsAndRows = (\n    p1Column: number,\n    p2Column: number,\n    p1Row: number,\n    p2Row: number,\n    p1Diagonal: number,\n    p2Diagonal: number,\n    p1BackDiagonal: number,\n    p2BackDiagonal: number\n  ) => {\n    if (p1Column) {\n      return setWinner(players[\"P1\"]);\n    }\n    if (p2Column) {\n      return setWinner(players[\"P2\"]);\n    }\n    if (p1Row) {\n      return setWinner(players[\"P1\"]);\n    }\n    if (p2Row) {\n      return setWinner(players[\"P2\"]);\n    }\n    if (p1Diagonal) {\n      return setWinner(players[\"P1\"]);\n    }\n    if (p2Diagonal) {\n      return setWinner(players[\"P2\"]);\n    }\n    if (p1BackDiagonal) {\n      return setWinner(players[\"P1\"]);\n    }\n    if (p2BackDiagonal) {\n      return setWinner(players[\"P2\"]);\n    }\n  };\n\n  const wrapperStyle: { [key: string]: string } = {\n    width: \"490px\",\n    display: \"flex\",\n    justifyContent: \"space-around\",\n    margin: \"0 auto\",\n  };\n\n  const columnStyle: { [key: string]: string } = {\n    border: \"1px solid black\",\n    width: \"60px\",\n    height: \"360px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  };\n\n  const getDiskStyle = (x: string | null) => ({\n    width: \"50px\",\n    height: \"50px\",\n    marginBottom: \"5px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderRadius: \"50%\",\n    backgroundColor: x === \"P1\" ? \"black\" : \"red\",\n    color: x === \"P1\" ? \"white\" : \"yellow\",\n  });\n\n  const cleanBoard = () => {\n    setWinner(null);\n    setColumns(JSON.parse(JSON.stringify(initialState)));\n  };\n\n  return (\n    <>\n      {!!winner && `${winner} Win!`}\n      <div style={wrapperStyle}>\n        {columns.map((column: Array<string>, idx: number) => {\n          return (\n            <div\n              key={idx}\n              style={columnStyle}\n              onClick={!!winner ? cleanBoard : () => clickHandler(idx)}\n            >\n              {column.map((personDisc: string, i: number) => {\n                const currentDiscStyle = getDiskStyle(personDisc);\n                return (\n                  <div key={i} style={currentDiscStyle}>\n                    {players[personDisc]}\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}